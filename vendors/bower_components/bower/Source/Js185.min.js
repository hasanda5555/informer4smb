if(!Function.prototype.bind){Function.prototype.bind=function(context){if(typeof this!=="function")throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");var args=slice.call(arguments,1),toBind=this,Nop=function(){},Bound=function(){var isInstance;try{isInstance=this instanceof Nop}catch(ignored){isInstance=false}return toBind.apply(isInstance?this:context||{},args.concat(slice.call(arguments)))};Nop.prototype=toBind.prototype;Bound.prototype=new Nop;return Bound}}if(!Object.keys)(function(has){Object.keys=function(obj){if(obj!==Object(obj))throw new TypeError("Object.keys called on non-object");var keys=[],i;for(i in obj)if(has.call(obj,i))keys.push(i);return keys}})({}.hasOwnProperty);if(!Array.isArray){Array.isArray=function(o){return o&&toString.call(o)==="[object Array]"}}if(!Object.create){Object.create=function(o){if(arguments.length>1){throw new Error("Object.create implementation only accepts the first parameter.")}function F(){}F.prototype=o;return new F}}if(!String.prototype.trim){String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g,"")}}if(!String.prototype.trimLeft){String.prototype.trimLeft=function(){return this.replace(/^\s+/,"")}}if(!String.prototype.trimRight){String.prototype.trimRight=function(){return this.replace(/\s+$/g,"")}}